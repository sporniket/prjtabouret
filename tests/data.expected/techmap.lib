/*
---
SPDX-License-Identifier: CC0-1.0
(c) 2024 David SPORN
---
GAL16v8 Technological map
Version: 0.0.0.dev0

All parameters/attributes/properties are typical, unless stated otherwise
*/
library(gal16v8) {
    cell(GND) {
        area: 0;
        pin(Q) {
            direction: output;
            function: "(0)";
        }
    }
    cell(VCC) {
        area: 0;
        pin(Q) {
            direction: output;
            function: "(1)";
        }
    }
    cell(DFFE) {
        area: 600;
        ff("IQ", "IQN") {
            clocked_on: CLK;
            next_state: D;
        }
        pin(CLK) {
            direction: input;
            clock: true;
        }
        pin(D) {
            direction: input;
        }
        pin(CE) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
        pin(QN) {
            direction: output;
            function: "IQN";
        }
        ; // empty statement
    }
    cell(NOT) {
        area: 100;
        pin(A) {
            direction: input;
        }
        pin(QN) {
            direction: output;
            function: "(!A)";
        }
    }

    cell(OR2) {
        area: 200;
        pin(A) {
            direction: input;
        }
        pin(B) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "((A+B))";
        }
    }
    cell(OR3) {
        area: 300;
        pin(A) {
            direction: input;
        }
        pin(B) {
            direction: input;
        }
        pin(C) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "((A+B+C))";
        }
    }
    cell(OR4) {
        area: 400;
        pin(A) {
            direction: input;
        }
        pin(B) {
            direction: input;
        }
        pin(C) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "((A+B+C+D))";
        }
    }
    cell(OR5) {
        area: 500;
        pin(A) {
            direction: input;
        }
        pin(B) {
            direction: input;
        }
        pin(C) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(E) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "((A+B+C+D+E))";
        }
    }
    cell(OR6) {
        area: 600;
        pin(A) {
            direction: input;
        }
        pin(B) {
            direction: input;
        }
        pin(C) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(E) {
            direction: input;
        }
        pin(F) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "((A+B+C+D+E+F))";
        }
    }
    cell(OR7) {
        area: 700;
        pin(A) {
            direction: input;
        }
        pin(B) {
            direction: input;
        }
        pin(C) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(E) {
            direction: input;
        }
        pin(F) {
            direction: input;
        }
        pin(G) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "((A+B+C+D+E+F+G))";
        }
    }
    cell(OR8) {
        area: 800;
        pin(A) {
            direction: input;
        }
        pin(B) {
            direction: input;
        }
        pin(C) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(E) {
            direction: input;
        }
        pin(F) {
            direction: input;
        }
        pin(G) {
            direction: input;
        }
        pin(H) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "((A+B+C+D+E+F+G+H))";
        }
    }

}
